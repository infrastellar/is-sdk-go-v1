package mission

const (
	MissionFileTF = `#: GENERATED
# Our main mission object
variable "mission" {
  type = any
}

locals {
  ### MISSION DEFAULTS
  mission_defaults = {
    name = "{{.MissionName}}"
    id   = "{{.MissionID}}"

  }
  mission = merge(local.mission_defaults, var.mission)

  ### MISSION FEATURES
  mission_features = {
  }
  features = merge(local.mission_features, var.environment.features)

  ### MISSION CONTROLS
  enable = {
    # Use to enable when environment status is "unlocked"
    is_unlocked = var.environment.status.recovery == "unlocked" ? true : false

    # Make sure of any potential we're the production environment
    is_production = anytrue([
      strcontains(var.environment.name, "prod"),
      strcontains(var.environment.id, "prod"),
    ])

    # Use to enable in the first region
    in_region   = alltrue([var.region.arrangement == 0])
    # A quick way to determine region designation
    is_publisher  = var.region.status.designation == "publisher" ? true : false
    is_subscriber = var.region.status.designation == "subscriber" ? true : false
  }

  ### MISSION TAGS
  mission_tags = {
    "mission:name" = local.mission.name,
    "mission:id"   = local.mission.id,
  }
  # The main tags variable used throughout procedures
  tags = merge(local.mission_tags, var.environment.tags)

  ### DEFAULT TAGS: used by aws provider
  default_tags = {
    "mission:version" = module.revision.branch
    "mission:applied" = module.revision.user
  }
}

# Return the branch and SHA of our current program version control, used for
# default tags on resources through the provider
module "revision" {
  # NOTE: Module path is relative to the procedure, not the mission file
  source = "../../modules/program-revision"
}

# Manage mission documentation. Rendered documents are placed in the specific
# environments' docs folder. All that is needed is to drop a README.md into the
# procedure and it will get included. You can use template variables. All of
# the keys of the module below can be used as template variables with the
# defaults (mission_features, mission_defaults) passed to the mission README.md
module "documentation" {
  source      = "../../modules/documentation"
  module_path = path.module

  # Pass in a documentation structure from the procedure if it exists
  documentation = local.documentation

  # The following are passed to the procedure README.md templatefile function
  region      = var.region
  environment = var.environment
  mission     = local.mission  # Compiled from the mission configuration in the environment
  features    = local.features # Compiled from the environment configuration
  enable      = local.enable   # Enabled on the mission according to the environment configuration

  # The following are passed to the mission README.md templatefile function
  mission_defaults = local.mission_defaults # Mission default configurations
  mission_features = local.mission_features # Mission default features
}

terraform {
  required_version = ">= 1.9"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.7, <= 6.0"
    }
    random = {
      source  = "hashicorp/random"
      version = ">= 3.6, <= 4.0"
    }
    tls = {
      source  = "hashicorp/tls"
      version = ">= 4.0, <= 5.0"
    }
    external = {
      source  = "hashicorp/external"
      version = ">= 2.3, <= 3.0"
    }
  }
  backend "s3" {}
}

# Providers are generated by ISZI using the environment configuration
`
)
